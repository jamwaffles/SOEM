use ::libc;
extern "C" {
    #[no_mangle]
    fn sprintf(_: *mut libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
    #[no_mangle]
    static mut ecx_context: ecx_contextt;
    #[no_mangle]
    fn ecx_poperror(context: *mut ecx_contextt, Ec: *mut ec_errort) -> boolean;
}
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: libc::c_int,
    pub __count: libc::c_uint,
    pub __owner: libc::c_int,
    pub __nusers: libc::c_uint,
    pub __kind: libc::c_int,
    pub __spins: libc::c_short,
    pub __elision: libc::c_short,
    pub __list: __pthread_list_t,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [libc::c_char; 40],
    pub __align: libc::c_long,
}
pub type int16_t = __int16_t;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint8_t = __uint8_t;
pub type uint16_t = __uint16_t;
pub type uint32_t = __uint32_t;
pub type boolean = uint8_t;
pub type int16 = int16_t;
pub type int32 = int32_t;
pub type uint8 = uint8_t;
pub type uint16 = uint16_t;
pub type uint32 = uint32_t;
pub type int64 = int64_t;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_timet {
    pub sec: uint32,
    pub usec: uint32,
}
pub type ec_bufT = [uint8; 1518];
pub type ec_err_type = libc::c_uint;
pub const EC_ERR_TYPE_EOE_INVALID_RX_DATA: ec_err_type = 11;
pub const EC_ERR_TYPE_FOE_FILE_NOTFOUND: ec_err_type = 10;
pub const EC_ERR_TYPE_MBX_ERROR: ec_err_type = 9;
pub const EC_ERR_TYPE_SOE_ERROR: ec_err_type = 8;
pub const EC_ERR_TYPE_FOE_PACKETNUMBER: ec_err_type = 7;
pub const EC_ERR_TYPE_FOE_BUF2SMALL: ec_err_type = 6;
pub const EC_ERR_TYPE_FOE_ERROR: ec_err_type = 5;
pub const EC_ERR_TYPE_SDOINFO_ERROR: ec_err_type = 4;
pub const EC_ERR_TYPE_PACKET_ERROR: ec_err_type = 3;
pub const EC_ERR_TYPE_EMERGENCY: ec_err_type = 1;
pub const EC_ERR_TYPE_SDO_ERROR: ec_err_type = 0;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_errort {
    pub Time: ec_timet,
    pub Signal: boolean,
    pub Slave: uint16,
    pub Index: uint16,
    pub SubIdx: uint8,
    pub Etype: ec_err_type,
    pub c2rust_unnamed: C2RustUnnamed,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union C2RustUnnamed {
    pub AbortCode: int32,
    pub c2rust_unnamed: C2RustUnnamed_0,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct C2RustUnnamed_0 {
    pub ErrorCode: uint16,
    pub ErrorReg: uint8,
    pub b1: uint8,
    pub w1: uint16,
    pub w2: uint16,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_stackT {
    pub sock: *mut libc::c_int,
    pub txbuf: *mut [ec_bufT; 16],
    pub txbuflength: *mut [libc::c_int; 16],
    pub tempbuf: *mut ec_bufT,
    pub rxbuf: *mut [ec_bufT; 16],
    pub rxbufstat: *mut [libc::c_int; 16],
    pub rxsa: *mut [libc::c_int; 16],
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecx_redportt {
    pub stack: ec_stackT,
    pub sockhandle: libc::c_int,
    pub rxbuf: [ec_bufT; 16],
    pub rxbufstat: [libc::c_int; 16],
    pub rxsa: [libc::c_int; 16],
    pub tempinbuf: ec_bufT,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecx_portt {
    pub stack: ec_stackT,
    pub sockhandle: libc::c_int,
    pub rxbuf: [ec_bufT; 16],
    pub rxbufstat: [libc::c_int; 16],
    pub rxsa: [libc::c_int; 16],
    pub tempinbuf: ec_bufT,
    pub tempinbufs: libc::c_int,
    pub txbuf: [ec_bufT; 16],
    pub txbuflength: [libc::c_int; 16],
    pub txbuf2: ec_bufT,
    pub txbuflength2: libc::c_int,
    pub lastidx: uint8,
    pub redstate: libc::c_int,
    pub redport: *mut ecx_redportt,
    pub getindex_mutex: pthread_mutex_t,
    pub tx_mutex: pthread_mutex_t,
    pub rx_mutex: pthread_mutex_t,
}

#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_fmmu {
    pub LogStart: uint32,
    pub LogLength: uint16,
    pub LogStartbit: uint8,
    pub LogEndbit: uint8,
    pub PhysStart: uint16,
    pub PhysStartBit: uint8,
    pub FMMUtype: uint8,
    pub FMMUactive: uint8,
    pub unused1: uint8,
    pub unused2: uint16,
}
pub type ec_fmmut = ec_fmmu;

#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_sm {
    pub StartAddr: uint16,
    pub SMlength: uint16,
    pub SMflags: uint32,
}
pub type ec_smt = ec_sm;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecx_context {
    pub port: *mut ecx_portt,
    pub slavelist: *mut ec_slavet,
    pub slavecount: *mut libc::c_int,
    pub maxslave: libc::c_int,
    pub grouplist: *mut ec_groupt,
    pub maxgroup: libc::c_int,
    pub esibuf: *mut uint8,
    pub esimap: *mut uint32,
    pub esislave: uint16,
    pub elist: *mut ec_eringt,
    pub idxstack: *mut ec_idxstackT,
    pub ecaterror: *mut boolean,
    pub DCtime: *mut int64,
    pub SMcommtype: *mut ec_SMcommtypet,
    pub PDOassign: *mut ec_PDOassignt,
    pub PDOdesc: *mut ec_PDOdesct,
    pub eepSM: *mut ec_eepromSMt,
    pub eepFMMU: *mut ec_eepromFMMUt,
    pub FOEhook:
        Option<unsafe extern "C" fn(_: uint16, _: libc::c_int, _: libc::c_int) -> libc::c_int>,
    pub EOEhook: Option<
        unsafe extern "C" fn(_: *mut ecx_contextt, _: uint16, _: *mut libc::c_void) -> libc::c_int,
    >,
    pub manualstatechange: libc::c_int,
    pub userdata: *mut libc::c_void,
}
pub type ecx_contextt = ecx_context;
pub type ec_eepromFMMUt = ec_eepromFMMU;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_eepromFMMU {
    pub Startpos: uint16,
    pub nFMMU: uint8,
    pub FMMU0: uint8,
    pub FMMU1: uint8,
    pub FMMU2: uint8,
    pub FMMU3: uint8,
}
pub type ec_eepromSMt = ec_eepromSM;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_eepromSM {
    pub Startpos: uint16,
    pub nSM: uint8,
    pub PhStart: uint16,
    pub Plength: uint16,
    pub Creg: uint8,
    pub Sreg: uint8,
    pub Activate: uint8,
    pub PDIctrl: uint8,
}
pub type ec_PDOdesct = ec_PDOdesc;

#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_PDOdesc {
    pub n: uint8,
    pub nu1: uint8,
    pub PDO: [uint32; 256],
}
pub type ec_PDOassignt = ec_PDOassign;

#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_PDOassign {
    pub n: uint8,
    pub nu1: uint8,
    pub index: [uint16; 256],
}
pub type ec_SMcommtypet = ec_SMcommtype;

#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_SMcommtype {
    pub n: uint8,
    pub nu1: uint8,
    pub SMtype: [uint8; 8],
}
pub type ec_idxstackT = ec_idxstack;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_idxstack {
    pub pushed: uint8,
    pub pulled: uint8,
    pub idx: [uint8; 16],
    pub data: [*mut libc::c_void; 16],
    pub length: [uint16; 16],
    pub dcoffset: [uint16; 16],
}
pub type ec_eringt = ec_ering;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_ering {
    pub head: int16,
    pub tail: int16,
    pub Error: [ec_errort; 65],
}
pub type ec_groupt = ec_group;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_group {
    pub logstartaddr: uint32,
    pub Obytes: uint32,
    pub outputs: *mut uint8,
    pub Ibytes: uint32,
    pub inputs: *mut uint8,
    pub hasdc: boolean,
    pub DCnext: uint16,
    pub Ebuscurrent: int16,
    pub blockLRW: uint8,
    pub nsegments: uint16,
    pub Isegment: uint16,
    pub Ioffset: uint16,
    pub outputsWKC: uint16,
    pub inputsWKC: uint16,
    pub docheckstate: boolean,
    pub IOsegment: [uint32; 64],
}
pub type ec_slavet = ec_slave;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_slave {
    pub state: uint16,
    pub ALstatuscode: uint16,
    pub configadr: uint16,
    pub aliasadr: uint16,
    pub eep_man: uint32,
    pub eep_id: uint32,
    pub eep_rev: uint32,
    pub Itype: uint16,
    pub Dtype: uint16,
    pub Obits: uint16,
    pub Obytes: uint32,
    pub outputs: *mut uint8,
    pub Ostartbit: uint8,
    pub Ibits: uint16,
    pub Ibytes: uint32,
    pub inputs: *mut uint8,
    pub Istartbit: uint8,
    pub SM: [ec_smt; 8],
    pub SMtype: [uint8; 8],
    pub FMMU: [ec_fmmut; 4],
    pub FMMU0func: uint8,
    pub FMMU1func: uint8,
    pub FMMU2func: uint8,
    pub FMMU3func: uint8,
    pub mbx_l: uint16,
    pub mbx_wo: uint16,
    pub mbx_rl: uint16,
    pub mbx_ro: uint16,
    pub mbx_proto: uint16,
    pub mbx_cnt: uint8,
    pub hasdc: boolean,
    pub ptype: uint8,
    pub topology: uint8,
    pub activeports: uint8,
    pub consumedports: uint8,
    pub parent: uint16,
    pub parentport: uint8,
    pub entryport: uint8,
    pub DCrtA: int32,
    pub DCrtB: int32,
    pub DCrtC: int32,
    pub DCrtD: int32,
    pub pdelay: int32,
    pub DCnext: uint16,
    pub DCprevious: uint16,
    pub DCcycle: int32,
    pub DCshift: int32,
    pub DCactive: uint8,
    pub configindex: uint16,
    pub SIIindex: uint16,
    pub eep_8byte: uint8,
    pub eep_pdi: uint8,
    pub CoEdetails: uint8,
    pub FoEdetails: uint8,
    pub EoEdetails: uint8,
    pub SoEdetails: uint8,
    pub Ebuscurrent: int16,
    pub blockLRW: uint8,
    pub group: uint8,
    pub FMMUunused: uint8,
    pub islost: boolean,
    pub PO2SOconfig: Option<unsafe extern "C" fn(_: uint16) -> libc::c_int>,
    pub PO2SOconfigx: Option<unsafe extern "C" fn(_: *mut ecx_contextt, _: uint16) -> libc::c_int>,
    pub name: [libc::c_char; 41],
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_sdoerrorlist_t {
    pub errorcode: uint32,
    pub errordescription: [libc::c_char; 128],
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_ALstatuscodelist_t {
    pub ALstatuscode: uint16,
    pub ALstatuscodedescription: [libc::c_char; 128],
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_soeerrorlist_t {
    pub errorcode: uint16,
    pub errordescription: [libc::c_char; 128],
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_mbxerrorlist_t {
    pub errorcode: uint16,
    pub errordescription: [libc::c_char; 128],
}
#[no_mangle]
pub static mut estring: [libc::c_char; 127] = [0; 127];
/* * SDO error list definition */
#[no_mangle]
pub static mut ec_sdoerrorlist: [ec_sdoerrorlist_t; 32] = unsafe {
    [
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode: 0u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x5030000u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Toggle bit not changed\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x5040000u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"SDO protocol timeout\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x5040001u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Client/Server command specifier not valid or unknown\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x5040005u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Out of memory\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6010000u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unsupported access to an object\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6010001u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Attempt to read to a write only object\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6010002u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Attempt to write to a read only object\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6010003u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Subindex can not be written, SI0 must be 0 for write access\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6010004u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"SDO Complete access not supported for variable length objects\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6010005u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Object length exceeds mailbox size\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6010006u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Object mapped to RxPDO, SDO download blocked\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6020000u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"The object does not exist in the object directory\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6040041u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"The object can not be mapped into the PDO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6040042u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"The number and length of the objects to be mapped would exceed the PDO length\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6040043u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"General parameter incompatibility reason\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6040047u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"General internal incompatibility in the device\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6060000u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Access failed due to a hardware error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6070010u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Data type does not match, length of service parameter does not match\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6070012u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Data type does not match, length of service parameter too high\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6070013u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Data type does not match, length of service parameter too low\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6090011u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Subindex does not exist\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6090030u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Value range of parameter exceeded (only for write access)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6090031u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Value of parameter written too high\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6090032u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Value of parameter written too low\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x6090036u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Maximum value is less than minimum value\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x8000000u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"General error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x8000020u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Data cannot be transferred or stored to the application\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x8000021u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Data cannot be transferred or stored to the application because of local control\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x8000022u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Data cannot be transferred or stored to the application because of the present device state\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode:
                                       0x8000023u32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Object dictionary dynamic generation fails or no object dictionary is present\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_sdoerrorlist_t{errorcode: 0xffffffffu32,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unknown\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
    ]
};
/* * AL status code list definition */
#[no_mangle]
pub static mut ec_ALstatuscodelist: [ec_ALstatuscodelist_t; 53] = unsafe {
    [
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"No error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x1u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Unspecified error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x2u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"No memory\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x11u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid requested state change\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x12u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Unknown requested state\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x13u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Bootstrap not supported\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x14u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"No valid firmware\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x15u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid mailbox configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x16u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid mailbox configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x17u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid sync manager configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x18u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"No valid inputs available\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x19u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"No valid outputs\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x1au16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Synchronization error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x1bu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Sync manager watchdog\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x1cu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid sync Manager types\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x1du16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid output configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x1eu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid input configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x1fu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid watchdog configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x20u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Slave needs cold start\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x21u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Slave needs INIT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x22u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Slave needs PREOP\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x23u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Slave needs SAFEOP\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x24u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid input mapping\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x25u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid output mapping\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x26u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Inconsistent settings\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x27u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Freerun not supported\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x28u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Synchronisation not supported\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x29u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Freerun needs 3buffer mode\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x2au16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Background watchdog\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x2bu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"No valid Inputs and Outputs\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x2cu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Fatal sync error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x2du16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"No sync error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x2eu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid input FMMU configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x30u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid DC SYNC configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x31u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Invalid DC latch configuration\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x32u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"PLL error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x33u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"DC sync IO error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x34u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"DC sync timeout error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x35u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"DC invalid sync cycle time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x36u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"DC invalid sync0 cycle time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x37u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"DC invalid sync1 cycle time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x41u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"MBX_AOE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x42u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"MBX_EOE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x43u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"MBX_COE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x44u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"MBX_FOE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x45u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"MBX_SOE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x4fu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"MBX_VOE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x50u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"EEPROM no access\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x51u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"EEPROM error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x60u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Slave restarted locally\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0x61u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Device identification value updated\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0xf0u16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Application controller available\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_ALstatuscodelist_t{ALstatuscode:
                                           0xffffu16,
                                       ALstatuscodedescription:
                                           *::core::mem::transmute::<&[u8; 128],
                                                                     &mut [libc::c_char; 128]>(b"Unknown\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
    ]
};
/* * SoE error list definition */
#[no_mangle]
pub static mut ec_soeerrorlist: [ec_soeerrorlist_t; 51] = unsafe {
    [
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x1001u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No IDN\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x1009u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Invalid access to element 1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x2001u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No Name\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x2002u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Name transmission too short\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x2003u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Name transmission too long\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x2004u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Name cannot be changed (read only)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x2005u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Name is write-protected at this time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x3002u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Attribute transmission too short\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x3003u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Attribute transmission too long\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x3004u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Attribute cannot be changed (read only)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x3005u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Attribute is write-protected at this time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x4001u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No units\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x4002u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unit transmission too short\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x4003u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unit transmission too long\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x4004u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unit cannot be changed (read only)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x4005u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unit is write-protected at this time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x5001u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No minimum input value\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x5002u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Minimum input value transmission too short\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x5003u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Minimum input value transmission too long\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x5004u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Minimum input value cannot be changed (read only)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x5005u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Minimum input value is write-protected at this time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x6001u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No maximum input value\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x6002u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Maximum input value transmission too short\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x6003u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Maximum input value transmission too long\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x6004u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Maximum input value cannot be changed (read only)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x6005u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Maximum input value is write-protected at this time\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7002u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data transmission too short\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7003u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data transmission too long\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7004u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data cannot be changed (read only)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7005u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data is write-protected at this time (state)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7006u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data is smaller than the minimum input value\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7007u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data is smaller than the maximum input value\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7008u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Invalid operation data:Configured IDN will not be supported\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7009u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data write protected by a password\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x700au16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data is write protected, it is configured cyclically\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x700bu16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Invalid indirect addressing: (e.g., data container, list handling)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x700cu16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Operation data is write protected, due to other settings\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x700du16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Reserved\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7010u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Procedure command already active\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7011u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Procedure command not interruptible\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7012u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Procedure command at this time not executable (state)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7013u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Procedure command not executable (invalid or false parameters)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x7014u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No data state\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x8001u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No default value\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x8002u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Default value transmission too long\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x8004u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Default value cannot be changed, read only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x800au16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Invalid drive number\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x800au16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"General error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0x800au16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No element addressed\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_soeerrorlist_t{errorcode: 0xffffu16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unknown\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
    ]
};
/* * MBX error list definition */
#[no_mangle]
pub static mut ec_mbxerrorlist: [ec_mbxerrorlist_t; 10] = unsafe {
    [
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No error\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x1u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Syntax of 6 octet Mailbox Header is wrong\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x2u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"The mailbox protocol is not supported\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x3u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Channel Field contains wrong value\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x4u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"The service is no supported\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x5u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Invalid mailbox header\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x6u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Length of received mailbox data is too short\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x7u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"No more memory in slave\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0x8u16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"The length of data is inconsistent\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
        {
            let mut init =
                 ec_mbxerrorlist_t{errorcode: 0xffffu16,
                                   errordescription:
                                       *::core::mem::transmute::<&[u8; 128],
                                                                 &mut [libc::c_char; 128]>(b"Unknown\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),};
            init
        },
    ]
};
/* * Look up text string that belongs to SDO error code.
 *
 * @param[in] sdoerrorcode   = SDO error code as defined in EtherCAT protocol
 * @return readable string
 */
#[no_mangle]
pub unsafe extern "C" fn ec_sdoerror2string(mut sdoerrorcode: uint32) -> *const libc::c_char {
    let mut i: libc::c_int = 0i32;
    while ec_sdoerrorlist[i as usize].errorcode as libc::c_ulong != 0xffffffffu64
        && ec_sdoerrorlist[i as usize].errorcode != sdoerrorcode
    {
        i += 1
    }
    return ec_sdoerrorlist[i as usize].errordescription.as_ptr();
}
/* * Look up text string that belongs to AL status code.
 *
 * @param[in] ALstatuscode   = AL status code as defined in EtherCAT protocol
 * @return readable string
 */
#[no_mangle]
pub unsafe extern "C" fn ec_ALstatuscode2string(mut ALstatuscode: uint16) -> *mut libc::c_char {
    let mut i: libc::c_int = 0i32;
    while ec_ALstatuscodelist[i as usize].ALstatuscode as libc::c_int != 0xffffi32
        && ec_ALstatuscodelist[i as usize].ALstatuscode as libc::c_int
            != ALstatuscode as libc::c_int
    {
        i += 1
    }
    return ec_ALstatuscodelist[i as usize]
        .ALstatuscodedescription
        .as_ptr() as *mut libc::c_char;
}
/* * Look up text string that belongs to SoE error code.
 *
 * @param[in] errorcode   = SoE error code as defined in EtherCAT protocol
 * @return readable string
 */
#[no_mangle]
pub unsafe extern "C" fn ec_soeerror2string(mut errorcode: uint16) -> *mut libc::c_char {
    let mut i: libc::c_int = 0i32;
    while ec_soeerrorlist[i as usize].errorcode as libc::c_int != 0xffffi32
        && ec_soeerrorlist[i as usize].errorcode as libc::c_int != errorcode as libc::c_int
    {
        i += 1
    }
    return ec_soeerrorlist[i as usize].errordescription.as_ptr() as *mut libc::c_char;
}
/* * Look up text string that belongs to MBX error code.
 *
 * @param[in] errorcode   = MBX error code as defined in EtherCAT protocol
 * @return readable string
 */
#[no_mangle]
pub unsafe extern "C" fn ec_mbxerror2string(mut errorcode: uint16) -> *mut libc::c_char {
    let mut i: libc::c_int = 0i32;
    while ec_mbxerrorlist[i as usize].errorcode as libc::c_int != 0xffffi32
        && ec_mbxerrorlist[i as usize].errorcode as libc::c_int != errorcode as libc::c_int
    {
        i += 1
    }
    return ec_mbxerrorlist[i as usize].errordescription.as_ptr() as *mut libc::c_char;
}
/* * Convert an error to text string.
 *
 * @param[in] Ec = Struct describing the error.
 * @return readable string
 */
#[no_mangle]
pub unsafe extern "C" fn ecx_err2string(Ec: ec_errort) -> *mut libc::c_char {
    let mut timestr: [libc::c_char; 20] = [0; 20];
    sprintf(
        timestr.as_mut_ptr(),
        b"Time:%12.3f\x00" as *const u8 as *const libc::c_char,
        Ec.Time.sec as libc::c_double + Ec.Time.usec as libc::c_double / 1000000.0f64,
    );
    match Ec.Etype {
        0 => {
            sprintf(
                estring.as_mut_ptr(),
                b"%s SDO slave:%d index:%4.4x.%2.2x error:%8.8x %s\n\x00" as *const u8
                    as *const libc::c_char,
                timestr.as_mut_ptr(),
                Ec.Slave as libc::c_int,
                Ec.Index as libc::c_int,
                Ec.SubIdx as libc::c_int,
                Ec.c2rust_unnamed.AbortCode as libc::c_uint,
                ec_sdoerror2string(Ec.c2rust_unnamed.AbortCode as uint32),
            );
        }
        1 => {
            sprintf(
                estring.as_mut_ptr(),
                b"%s EMERGENCY slave:%d error:%4.4x\n\x00" as *const u8 as *const libc::c_char,
                timestr.as_mut_ptr(),
                Ec.Slave as libc::c_int,
                Ec.c2rust_unnamed.c2rust_unnamed.ErrorCode as libc::c_int,
            );
        }
        3 => {
            sprintf(
                estring.as_mut_ptr(),
                b"%s PACKET slave:%d index:%4.4x.%2.2x error:%d\n\x00" as *const u8
                    as *const libc::c_char,
                timestr.as_mut_ptr(),
                Ec.Slave as libc::c_int,
                Ec.Index as libc::c_int,
                Ec.SubIdx as libc::c_int,
                Ec.c2rust_unnamed.c2rust_unnamed.ErrorCode as libc::c_int,
            );
        }
        4 => {
            sprintf(
                estring.as_mut_ptr(),
                b"%s SDO slave:%d index:%4.4x.%2.2x error:%8.8x %s\n\x00" as *const u8
                    as *const libc::c_char,
                timestr.as_mut_ptr(),
                Ec.Slave as libc::c_int,
                Ec.Index as libc::c_int,
                Ec.SubIdx as libc::c_int,
                Ec.c2rust_unnamed.AbortCode as libc::c_uint,
                ec_sdoerror2string(Ec.c2rust_unnamed.AbortCode as uint32),
            );
        }
        8 => {
            sprintf(
                estring.as_mut_ptr(),
                b"%s SoE slave:%d IDN:%4.4x error:%4.4x %s\n\x00" as *const u8
                    as *const libc::c_char,
                timestr.as_mut_ptr(),
                Ec.Slave as libc::c_int,
                Ec.Index as libc::c_int,
                Ec.c2rust_unnamed.AbortCode as libc::c_uint,
                ec_soeerror2string(Ec.c2rust_unnamed.c2rust_unnamed.ErrorCode),
            );
        }
        9 => {
            sprintf(
                estring.as_mut_ptr(),
                b"%s MBX slave:%d error:%4.4x %s\n\x00" as *const u8 as *const libc::c_char,
                timestr.as_mut_ptr(),
                Ec.Slave as libc::c_int,
                Ec.c2rust_unnamed.c2rust_unnamed.ErrorCode as libc::c_int,
                ec_mbxerror2string(Ec.c2rust_unnamed.c2rust_unnamed.ErrorCode),
            );
        }
        _ => {
            sprintf(
                estring.as_mut_ptr(),
                b"%s error:%8.8x\n\x00" as *const u8 as *const libc::c_char,
                timestr.as_mut_ptr(),
                Ec.c2rust_unnamed.AbortCode as libc::c_uint,
            );
        }
    }
    return estring.as_mut_ptr();
}
/* * Look up error in ec_errorlist and convert to text string.
 *
 * @param[in]  context        = context struct
 * @return readable string
 */
#[no_mangle]
pub unsafe extern "C" fn ecx_elist2string(mut context: *mut ecx_contextt) -> *mut libc::c_char {
    let mut Ec: ec_errort = ec_errort {
        Time: ec_timet { sec: 0, usec: 0 },
        Signal: 0,
        Slave: 0,
        Index: 0,
        SubIdx: 0,
        Etype: EC_ERR_TYPE_SDO_ERROR,
        c2rust_unnamed: C2RustUnnamed { AbortCode: 0 },
    };
    if ecx_poperror(context, &mut Ec) != 0 {
        return ecx_err2string(Ec);
    } else {
        return b"\x00" as *const u8 as *mut libc::c_char;
    };
}
#[no_mangle]
pub unsafe extern "C" fn ec_elist2string() -> *mut libc::c_char {
    return ecx_elist2string(&mut ecx_context);
}
